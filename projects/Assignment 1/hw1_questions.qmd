---
title: "A Replication of Karlan and List (2007)"
author: "Allen Abraham"
date: today
callout-appearance: minimal # this hides the blue "i" icon on .callout-notes
---


## Introduction

Dean Karlan at Yale and John List at the University of Chicago conducted a field experiment to test the effectiveness of different fundraising letters. They sent out 50,000 fundraising letters to potential donors, randomly assigning each letter to one of three treatments: a standard letter, a matching grant letter, or a challenge grant letter. They published the results of this experiment in the _American Economic Review_ in 2007. The article and supporting data are available from the [AEA website](https://www.aeaweb.org/articles?id=10.1257/aer.97.5.1774) and from Innovations for Poverty Action as part of [Harvard's Dataverse](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/27853&version=4.2). 



This project seeks to replicate their results utilizing various forms of hypothesis testing, to include t-test, linear regression, and probit regression.


## Data

```{python}
#| message: false
#| echo: true

import pandas as pd

data = pd.read_stata('data/karlan_list_2007.dta')
data.to_csv('data/karlan_list_2007.csv', index=False)
data

```


### Description of Data

The data set contains 50,083 observations and 51 variables. The key variables are as follows:

:::: {.callout-note collapse="true"}
### Variable Definitions

| Variable             | Description                                                         |
|----------------------|---------------------------------------------------------------------|
| `treatment`          | Treatment                                                           |
| `control`            | Control                                                             |
| `ratio`              | Match ratio                                                         |
| `ratio2`             | 2:1 match ratio                                                     |
| `ratio3`             | 3:1 match ratio                                                     |
| `size`               | Match threshold                                                     |
| `size25`             | \$25,000 match threshold                                            |
| `size50`             | \$50,000 match threshold                                            |
| `size100`            | \$100,000 match threshold                                           |
| `sizeno`             | Unstated match threshold                                            |
| `ask`                | Suggested donation amount                                           |
| `askd1`              | Suggested donation was highest previous contribution                |
| `askd2`              | Suggested donation was 1.25 x highest previous contribution         |
| `askd3`              | Suggested donation was 1.50 x highest previous contribution         |
| `ask1`               | Highest previous contribution (for suggestion)                      |
| `ask2`               | 1.25 x highest previous contribution (for suggestion)               |
| `ask3`               | 1.50 x highest previous contribution (for suggestion)               |
| `amount`             | Dollars given                                                       |
| `gave`               | Gave anything                                                       |
| `amountchange`       | Change in amount given                                              |
| `hpa`                | Highest previous contribution                                       |
| `ltmedmra`           | Small prior donor: last gift was less than median \$35              |
| `freq`               | Number of prior donations                                           |
| `years`              | Number of years since initial donation                              |
| `year5`              | At least 5 years since initial donation                             |
| `mrm2`               | Number of months since last donation                                |
| `dormant`            | Already donated in 2005                                             |
| `female`             | Female                                                              |
| `couple`             | Couple                                                              |
| `state50one`         | State tag: 1 for one observation of each of 50 states; 0 otherwise  |
| `nonlit`             | Nonlitigation                                                       |
| `cases`              | Court cases from state in 2004-5 in which organization was involved |
| `statecnt`           | Percent of sample from state                                        |
| `stateresponse`      | Proportion of sample from the state who gave                        |
| `stateresponset`     | Proportion of treated sample from the state who gave                |
| `stateresponsec`     | Proportion of control sample from the state who gave                |
| `stateresponsetminc` | stateresponset - stateresponsec                                     |
| `perbush`            | State vote share for Bush                                           |
| `close25`            | State vote share for Bush between 47.5% and 52.5%                   |
| `red0`               | Red state                                                           |
| `blue0`              | Blue state                                                          |
| `redcty`             | Red county                                                          |
| `bluecty`            | Blue county                                                         |
| `pwhite`             | Proportion white within zip code                                    |
| `pblack`             | Proportion black within zip code                                    |
| `page18_39`          | Proportion age 18-39 within zip code                                |
| `ave_hh_sz`          | Average household size within zip code                              |
| `median_hhincome`    | Median household income within zip code                             |
| `powner`             | Proportion house owner within zip code                              |
| `psch_atlstba`       | Proportion who finished college within zip code                     |
| `pop_propurban`      | Proportion of population urban within zip code                      |

::::


### Balance Test 

As an ad hoc test of the randomization mechanism, I provide a series of tests that compare aspects of the treatment and control groups to assess whether they are statistically significantly different from one another.

##### Months Since Last Donation (mrm2)

Using the variable `mrm2`, I test the balance of the treatment and control groups. I first calculate the difference in means between the treatment and control groups and then use both a t-test and linear regression to test whether this difference is statistically significant at the 95% confidence level.

```{python}
#| message: false
#| echo: true

#first, let's test the balance of the treatment and control groups on the variable mrm2 using a t-test

#average months since last donation for the treatment group
treatment_mrm2 = data[data['treatment'] == 1]['mrm2'].mean()

#average months since last donation for the control group
control_mrm2 = data[data['control'] == 1]['mrm2'].mean()

#standard deviation of months since last donation for the treatment group
treatment_mrm2_sd = data[data['treatment'] == 1]['mrm2'].std()

#standard deviation of months since last donation for the control group
control_mrm2_sd = data[data['control'] == 1]['mrm2'].std()

#number of observations in the treatment group
n_treatment = data['treatment'].sum()

#number of observations in the control group
n_control = data['control'].sum()

#difference in means between the treatment and control groups
diff_mrm2 = treatment_mrm2 - control_mrm2

print("difference in means between control and treatment group for mrm2: ", diff_mrm2)

#t-statistic
t_stat_mrm2 = (treatment_mrm2 - control_mrm2) / (((treatment_mrm2_sd**2 / n_treatment) + (control_mrm2_sd**2 / n_control))**0.5)

print("t-statistic for mrm2: ", t_stat_mrm2)


#convert the t-statistic to a p-value
from scipy.stats import t

p_value_mrm2 = t.sf(t_stat_mrm2, n_treatment + n_control - 2)*2

print("p-value for mrm2: ", p_value_mrm2)
```

```{python}
#| message: false
#| echo: true

#now let's test the balance of the treatment and control groups on the variable mrm2 using a linear regression

import statsmodels.api as sm

model = sm.OLS.from_formula('mrm2 ~ treatment', data=data)
results = model.fit()

#extract the coefficient and p_value on the treatment variable
coef = results.params['treatment']
t_stat = results.tvalues['treatment']
p_value = results.pvalues['treatment']

print("coefficient for mrm2: ", coef)
print("t-statistic for mrm2: ", t_stat)
print("p-value for mrm2: ", p_value)


```

Using both the t-test and linear regression, the p-value for the difference in means between the treatment and control groups for the variable `mrm2` is 0.905. This means that if the null hypothesis is true, we would expect to see a difference in means as extreme as the one we observed in 90.5% of cases. Therefore, we fail to reject the null hypothesis that the treatment and control groups are statistically significantly different at the 95% confidence level. This suggests that the randomization was successful and the treatment and control groups are balanced with respect to the variable `mrm2`. The difference in means and linear regression coefficient of .014 matches the difference between the treatment and control group for "number of months since last donation" in Table 1 of the research paper. This table is provided to show that the treatment and control group is balanced and sampling bias should be low since the treatment and control group were picked randomly. 

##### Highest Previous Contribution (hpa)

Next, I test the balance of the treatment and control groups on the variable `hpa` using both a t-test and linear regression.

```{python}
#| message: false
#| echo: true

#average highest previous contribution for the treatment group
treatment_hpa = data[data['treatment'] == 1]['hpa'].mean()

#average highest previous contribution for the control group
control_hpa = data[data['control'] == 1]['hpa'].mean()

#standard deviation of highest previous contribution for the treatment group
treatment_hpa_sd = data[data['treatment'] == 1]['hpa'].std()

#standard deviation of highest previous contribution for the control group
control_hpa_sd = data[data['control'] == 1]['hpa'].std()

#number of observations in the treatment group
n_treatment = data['treatment'].sum()

#number of observations in the control group
n_control = data['control'].sum()

#difference in means between the treatment and control groups
diff_hpa = treatment_hpa - control_hpa

print("difference in means between control and treatment group for hpa: ", diff_hpa)

#t-statistic
t_stat_hpa = (treatment_hpa - control_hpa) / (((treatment_hpa_sd**2 / n_treatment) + (control_hpa_sd**2 / n_control))**0.5)

print("t-statistic for hpa: ", t_stat_hpa)

#convert the t-statistic to a p-value
p_value_hpa = t.sf(t_stat_hpa, n_treatment + n_control - 2)*2

print("p-value for hpa: ", p_value_hpa)

```

```{python}
#| message: false
#| echo: true

#now let's test the balance of the treatment and control groups on the variable hpa using a linear regression

model = sm.OLS.from_formula('hpa ~ treatment', data=data)
results = model.fit()

#extract the coefficient and p_value on the treatment variable
coef = results.params['treatment']
t_stat = results.tvalues['treatment']
p_value = results.pvalues['treatment']

print("coefficient for hpa: ", coef)
print("t-statistic for hpa: ", t_stat)
print("p-value for hpa: ", p_value)

```

Using both the t-test and linear regression, the p-value for the difference in means between the treatment and control groups for the variable `hpa` is 0.34. This means that if the null hypothesis is true, we would expect to see a difference in means as extreme as the one we observed in 34% of cases. Therefore, we fail to reject the null hypothesis that the treatment and control groups are similar at the 95% confidence level.

This suggests that the randomization was successful and the treatment and control groups are balanced with respect to the variable `hpa`. The difference in means and linear regression coefficient of 0.637 matches the difference between the treatment and control group for "highest previous contribution" in Table 1 of the research paper. 

##### Number of Prior Donations (freq)

Finally, I test the balance of the treatment and control groups on the variable `freq` using both a t-test and linear regression.

```{python}
#| message: false
#| echo: true

#average number of prior donations for the treatment group
treatment_freq = data[data['treatment'] == 1]['freq'].mean()

#average number of prior donations for the control group
control_freq = data[data['control'] == 1]['freq'].mean()

#standard deviation of number of prior donations for the treatment group
treatment_freq_sd = data[data['treatment'] == 1]['freq'].std()

#standard deviation of number of prior donations for the control group
control_freq_sd = data[data['control'] == 1]['freq'].std()

#number of observations in the treatment group
n_treatment = data['treatment'].sum()

#number of observations in the control group
n_control = data['control'].sum()

#difference in means between the treatment and control groups
diff_freq = treatment_freq - control_freq

print("difference in means between control and treatment group for freq: ", diff_freq)

#t-statistic
t_stat_freq = (treatment_freq - control_freq) / (((treatment_freq_sd**2 / n_treatment) + (control_freq_sd**2 / n_control))**0.5)

print("t-statistic for freq: ", t_stat_freq)


# convert the t-statistic to a p-value using cdf instead of sf
p_value_freq =  t.cdf(t_stat_freq, n_treatment + n_control - 2)*2

print("p-value for freq: ", p_value_freq)

```

```{python}
#| message: false
#| echo: true

#now let's test the balance of the treatment and control groups on the variable freq using a linear regression

model = sm.OLS.from_formula('freq ~ treatment', data=data)
results = model.fit()

#extract the coefficient and p_value on the treatment variable
coef = results.params['treatment']
t_stat = results.tvalues['treatment']
p_value = results.pvalues['treatment']

print("coefficient for freq: ", coef)
print("t-statistic for freq: ", t_stat)
print("p-value for freq: ", p_value)

```

Using both the t-test and linear regression, the p-value for the difference in means between the treatment and control groups for the variable `freq` is 0.91. This means that if the null hypothesis is true, we would expect to see a difference in means as extreme as the one we observed in 91% of cases. Therefore, we fail to reject the null hypothesis that states that the treatment and control groups are similar at the 95% confidence level.

This suggests that the randomization was successful and the treatment and control groups are balanced with respect to the variable `freq`. The difference in means and linear regression coefficient of -0.012 matches the difference between the treatment and control group for "number of prior donations" in Table 1 of the research paper.


### Charitable Contribution Made

First, I analyze whether matched donations lead to an increased response rate of making a donation. 


```{python}
#| message: false
#| echo: true

import matplotlib.pyplot as plt

#proportion of people who donated in the treatment group
prop_treatment = data[data['treatment'] == 1]['gave'].mean()

#proportion of people who donated in the control group
prop_control = data[data['control'] == 1]['gave'].mean()

plt.bar(['Treatment', 'Control'], [prop_treatment, prop_control])
plt.ylabel('Proportion of People Who Donated')
plt.title('Proportion of People Who Donated by Treatment and Control Group')
plt.show()


```


```{python}
#| message: false
#| echo: true

#t-test between treatment and control groups on the binary outcome of whether any charitable donation was made
from scipy.stats import ttest_ind

treatment_gave = data[data['treatment'] == 1]['gave']
control_gave = data[data['control'] == 1]['gave']

diff = treatment_gave.mean() - control_gave.mean()

t_stat, p_value = ttest_ind(treatment_gave, control_gave)

print("difference in response rates between control and treatment: ", diff)
print("t-statistic: ", t_stat)
print("p-value: ", p_value)
```

```{python}
#| message: false
#| echo: true

#bivariate linear regression that demonstrates the same finding
model = sm.OLS(data['gave'], sm.add_constant(data['treatment']))
results = model.fit()

#extract the coefficient and p_value on the treatment variable
coef = results.params['treatment']
t_stat = results.tvalues['treatment']
p_value = results.pvalues['treatment']

print("coefficient: ", coef)
print("t-statistic: ", t_stat)
print("p-value: ", p_value)

```

 The p-value of .002 for both the t-test and linear regression indicates that the difference in response rates between the treatment and control groups is statistically significant at the 95% confidence level. If the null hypothesis of the response rate being the same for both control and treatment group is true, we would expect to see a difference in response rates as extreme as the one we observed in only 0.2% of cases. Therefore, we reject the null hypothesis that the treatment and control groups are the same with respect to the likelihood of making a charitable donation.
 
 This suggests that the treatment of receiving a matched donation led to an increased likelihood of making a charitable donation. This finding is consistent with the results reported in Table 2a Panel A of the paper and their interpretation that the treatment effect is statistically significant.


```{python}
#| message: false
#| echo: true

model = sm.Probit(data['gave'], sm.add_constant(data['treatment']))
results = model.fit()



coef = results.params['treatment']
z_stat = results.tvalues['treatment']
p_value = results.pvalues['treatment']

print("coefficient", coef)
print("z-statistic: ", z_stat)
print("p-value: ", p_value)

#model summary
results.summary()
```

The probit regression confirms that the treatment effect is statistically significant at the 95% confidence level. Although the coefficient is different from the linear regression, the p-value of .002 is consistent with the t-test and linear regression results. 

Although Table 3 (Primary Regression Results) in the paper states that it is reporting coefficients of the probit regression, I was not able to replicate these coefficients. However, my linear regression coefficients matches the paper's probit regression coefficients. It seems like the numbers reported in Table 3 are actually the linear regression coefficients, not the probit regression coefficients. Further investigation is needed to confirm this. 


### Differences between Match Rates

Next, I assess the effectiveness of different sizes of matched donations on the response rate using a series of t-tests and linear regressions.


```{python}
#| message: false
#| echo: true

#t-test between 1:1 and 2:1 match ratios on the binary outcome of whether any charitable donation was made
treatment_gave_1 = data[data['treatment'] == 1]['gave'][data['ratio'] == 1]
treatment_gave_2 = data[data['treatment'] == 1]['gave'][data['ratio'] == 2]

diff = treatment_gave_2.mean() - treatment_gave_1.mean()

t_stat, p_value = ttest_ind(treatment_gave_2, treatment_gave_1)

print("difference in response rates between 1:1 and 2:1 match ratios: ", diff)
print("t-statistic: ", t_stat)
print("p-value: ", p_value)

```

```{python}
#| message: false
#| echo: true

#t-test between 2:1 and 3:1 match ratios on the binary outcome of whether any charitable donation was made
treatment_gave_2 = data[data['treatment'] == 1]['gave'][data['ratio'] == 2]
treatment_gave_3 = data[data['treatment'] == 1]['gave'][data['ratio'] == 3]

diff = treatment_gave_3.mean() - treatment_gave_2.mean()

t_stat, p_value = ttest_ind(treatment_gave_3, treatment_gave_2)

print("difference in response rates between 2:1 and 3:1 match ratios: ", diff)
print("t-statistic: ", t_stat)
print("p-value: ", p_value)

```

```{python}
#| message: false
#| echo: true

#t-test between 1:1 and 3:1 match ratios on the binary outcome of whether any charitable donation was made
treatment_gave_1 = data[data['treatment'] == 1]['gave'][data['ratio'] == 1]
treatment_gave_3 = data[data['treatment'] == 1]['gave'][data['ratio'] == 3]

diff = treatment_gave_3.mean() - treatment_gave_1.mean()

t_stat, p_value = ttest_ind(treatment_gave_3, treatment_gave_1)

print("difference in response rates between 1:1 and 3:1 match ratios: ", diff)
print("t-statistic: ", t_stat)
print("p-value: ", p_value)

```

The t-tests and the resulting p-values show that the difference in response rates between the 1:1 and 2:1 match ratios, the 2:1 and 3:1 match ratios, and the 1:1 and 3:1 match ratios are all statistically insignificant at the 95% confidence level. The null hypotheses that the response rates are the same across these groups cannot be rejected. 


```{python}
#| message: false
#| echo: true

# Create a new variable 'ratio1' that is equal to 1 if the match ratio is 1:1 and 0 otherwise
data['ratio1'] = (data['ratio'] == 1).astype(int)

model = sm.OLS.from_formula('gave ~ ratio1 + ratio2 + ratio3', data=data)
results = model.fit()
#show summary of regression results with just the coefficients and p-values without any notes
results.summary().tables[1]

```

The regression results show that the coefficients for `ratio1`, `ratio2`, and `ratio3` are all statistically insignificant at the 90% confidence level. Ratio of 1:1 has a p-value of 0.097 which is close to the 90% confidence level. This could suggest that the 1:1 ratio results in a lower response rate compared to the other ratios, although it is not very significant.  The p-values for `ratio2` and `ratio3` are 0.006 and 0.005, suggesting that the 2:1 and 3:1 match ratios do not have a significant effect on the likelihood of making a charitable donation compared to the overall average for the treatment group.


```{python}
#| message: false
#| echo: true

# Calculate the response rate difference between the 1:1 and 2:1 match ratios
diff_1_2 = data[(data['treatment'] == 1) & (data['ratio'] == 2)]['gave'].mean() - data[(data['treatment'] == 1) & (data['ratio'] == 1)]['gave'].mean()

# Calculate the response rate difference between the 2:1 and 3:1 match ratios
diff_2_3 = data[(data['treatment'] == 1) & (data['ratio'] == 3)]['gave'].mean() - data[(data['treatment'] == 1) & (data['ratio'] == 2)]['gave'].mean()

print("difference in response rates between 1:1 and 2:1 match ratios: ", diff_1_2)
print("difference in response rates between 2:1 and 3:1 match ratios: ", diff_2_3)

```

```{python}
#| message: false
#| echo: true



# Calculate the response rate difference between the 1:1 and 2:1 match ratios using the coefficients from the regression
diff_1_2_coef = results.params['ratio2'] - results.params['ratio1']

# Calculate the response rate difference between the 2:1 and 3:1 match ratios using the coefficients from the regression
diff_2_3_coef = results.params['ratio3'] - results.params['ratio2']

print("difference in response rates between 1:1 and 2:1 match ratios using regression coefficients: ", diff_1_2_coef)
print("difference in response rates between 2:1 and 3:1 match ratios using regression coefficients: ", diff_2_3_coef)

```

Using both linear regression and direct calculation from the data, we find that the difference in response rates between the 1:1 and 2:1 is only 0.12% and the difference in response rates between the 2:1 and 3:1 is only 0.01%. These difference are not statistically significant. 

This suggests that the size of the matched donation does not have a significant effect on the likelihood of making a charitable donation, given that there is atleast a 1:1 match. This finding is consistent with the results reported in the paper and their interpretation that the size of the matched donation does not have a significant effect on the likelihood of making a charitable donation.


### Size of Charitable Contribution

In this subsection, I analyze the effect of the size of matched donation on the size of the charitable contribution.

First, I analyze the difference in donation amounts between treatment and control group regardless of whether a donation was made using t-test and linear regression.

```{python}
#| message: false
#| echo: true

#t-test between treatment and control groups on the donation amount
treatment_amount = data[data['treatment'] == 1]['amount']
control_amount = data[data['control'] == 1]['amount']

diff = treatment_amount.mean() - control_amount.mean()

t_stat, p_value = ttest_ind(treatment_amount, control_amount)

print("difference in donation amounts between control and treatment: ", diff)
print("t-statistic: ", t_stat)
print("p-value: ", p_value)
```

```{python}
#| message: false
#| echo: true

#bivariate linear regression of the donation amount on the treatment status
model = sm.OLS.from_formula('amount ~ treatment', data=data)
results = model.fit()

#extract the coefficient and p_value on the treatment variable
coef = results.params['treatment']
t_stat = results.tvalues['treatment']
p_value = results.pvalues['treatment']

print("coefficient: ", coef)
print("t-statistic: ", t_stat)
print("p-value: ", p_value)

```

The p-value (.063) for the difference in donation amounts between the treatment and control groups is statistically significant at the 90% confidence level. This suggests that the treatment of receiving a matched donation led to a higher average donation amount. 


Now I will limit the data to just people who made a donation and repeat the previous analysis. This regression allows me to analyze how much respondents donate conditional on donating some positive amount. The regression coefficients will help me interpret the effect of the treatment on the donation amount among people who donated.

```{python}
#| message: false
#| echo: true

#limit the data to just people who made a donation
donated_data = data[data['gave'] == 1]

#t-test between treatment and control groups on the donation amount among people who donated
treatment_amount = donated_data[donated_data['treatment'] == 1]['amount']
control_amount = donated_data[donated_data['control'] == 1]['amount']

diff = treatment_amount.mean() - control_amount.mean()

t_stat, p_value = ttest_ind(treatment_amount, control_amount)

print("difference in donation amounts between control and treatment among people who donated: ", diff)
print("t-statistic: ", t_stat)
print("p-value: ", p_value)
```

```{python}
#| message: false
#| echo: true

#bivariate linear regression of the donation amount on the treatment status among people who donated
model = sm.OLS.from_formula('amount ~ treatment', data=donated_data)
results = model.fit()

#extract the coefficient and p_value on the treatment variable
coef = results.params['treatment']
t_stat = results.tvalues['treatment']
p_value = results.pvalues['treatment']

print("coefficient: ", coef)
print("t-statistic: ", t_stat)
print("p-value: ", p_value)

```

Among all the people who donated, those who did not recieve the treatment of matching donation actually donated more on average. However, the p-value (.56) suggests that this difference is not statistically significant. So we cannot conclude that the treatment of receiving a matched donation led to a higher average donation amount among people who donated.

We can conclude that if an individual already had the intention to donate with or without the match, the treatment of receiving a matched donation did not lead to a higher average donation amount. 

Finally, I will plot histograms of the donation amounts for the treatment and control groups among people who donated to visualize the distribution.
```{python}
#| message: false
#| echo: true


#plot histogram of donation amounts for the treatment group among people who donated
plt.hist(donated_data[donated_data['treatment'] == 1]['amount'], bins=20, color='skyblue', edgecolor='black')
plt.axvline(donated_data[donated_data['treatment'] == 1]['amount'].mean(), color='red', linestyle='dashed', linewidth=2, label='Mean Donation Amount')
plt.title('Distribution of Donation Amounts Among People Who Donated (Treatment)')
plt.xlabel('Donation Amount')
plt.ylabel('Frequency')
plt.legend()
plt.show()

#plot histogram of donation amounts for the control group among people who donated
plt.hist(donated_data[donated_data['control'] == 1]['amount'], bins=20, color='skyblue', edgecolor='black')
plt.axvline(donated_data[donated_data['control'] == 1]['amount'].mean(), color='red', linestyle='dashed', linewidth=2, label='Mean Donation Amount')
plt.title('Distribution of Donation Amounts Among People Who Donated (Control)')
plt.xlabel('Donation Amount')
plt.ylabel('Frequency')
plt.legend()
plt.show()
```

It is clear from the histograms that the actual number of people who donated is higher in the treatment group compared to the control group because the frequency is much higher for the treatment group. However, the average donation amount is slightly higher (insignificant) in the control group and shown with the red dashed line.  

## Simulation Experiment

As a reminder of how the t-statistic "works," in this section I use simulation to demonstrate the Law of Large Numbers and the Central Limit Theorem.

Suppose the true distribution of respondents who do not get a charitable donation match is Bernoulli with probability p=0.018 that a donation is made. 

Further suppose that the true distribution of respondents who do get a charitable donation match of any size  is Bernoulli with probability p=0.022 that a donation is made.

### Law of Large Numbers

We will simulate 10,000 draws from the control distribution and 10,000 draws from the treatment distribution. We will then calculate the vector of 10,000 differences in the response rates between the treatment and control groups. Finally, we will plot the cumulative average of the vector of differences to demonstrate the Law of Large Numbers.

```{python}
#| message: false
#| echo: true

import numpy as np
import matplotlib.pyplot as plt

# Separate the treatment and control groups for the "amount" variable
treatment_amount = data[data['treatment'] == 1]['gave']
control_amount = data[data['treatment'] == 0]['gave']

# Calculate the true difference in means
true_diff = treatment_amount.mean() - control_amount.mean()

np.random.seed(0)

# Simulate 100,000 draws from the control distribution
simulated_control_draws = np.random.choice(control_amount, 10000, replace=False)
simulated_treatment_draws = np.random.choice(treatment_amount, 10000, replace=False)

# Calculate the vector of 10,000 differences
differences = simulated_treatment_draws - simulated_control_draws

# Calculate the cumulative average of the vector of differences
cumulative_average_differences = np.cumsum(differences) / np.arange(1, 10001)


plt.plot(cumulative_average_differences, color='red')
plt.axhline(y=true_diff, color='black', linestyle='--', label='True Difference in Means')
plt.xlabel('Number of Draws')
plt.ylabel('Cumulative Average Difference')
plt.title('Cumulative Average Differences in Response Rates')
plt.legend()
plt.grid(True)
plt.show()




```

The plot shows the cumulative average of the differences in the mean of "gave" or the response rate between the treatment and control groups as the number of draws increases. The cumulative average approaches the true difference in means as the number of draws increases, which demonstrates the Law of Large Numbers. This means that the more draws we take, the closer the average difference in response rate between the treatment and control groups will be to the true difference in means which is 0.004.

### Central Limit Theorem

We will simulate 1000 calculations for 50, 200, 500, and 1000 draws from both the control and treatment distributions. We will  calculate the average difference in the response rate between the treatment and control groups for each draw. Finally, we will plot histograms of the average differences in the response rates for each sample size to demonstrate the Central Limit Theorem.

```{python}
#| message: false
#| echo: true

import numpy as np
import matplotlib.pyplot as plt

treatment_amount = data[data['treatment'] == 1]['gave']
control_amount = data[data['treatment'] == 0]['gave']

true_diff =  treatment_amount.mean()-control_amount.mean()
print('True Difference in the response rate between Control and Treatment:', true_diff)

# Simulate 1000 draws of 50, 200, 500, and 1000 from both the control and treatment distributions
sample_sizes = [50, 200, 500, 1000]
num_simulations = 1000

np.random.seed(0)

for sample_size in sample_sizes:
    sample_diffs = []
    for _ in range(num_simulations):
        simulated_control_draws = np.random.choice(control_amount, sample_size, replace=False)
        simulated_treatment_draws = np.random.choice(treatment_amount, sample_size, replace=False)
        sample_diffs.append(simulated_treatment_draws.mean() - simulated_control_draws.mean())

    plt.hist(sample_diffs, bins=20, color='skyblue', edgecolor='black')
    plt.axvline(x=true_diff, color='red', linestyle='--', label='True Difference in Response Rate')
    plt.xlabel('Sample Difference in Response Rates')
    plt.ylabel('Frequency')
    plt.title(f'Histogram of Sample Differences in Response Rates (Sample Size = {sample_size})')
    plt.legend()
    plt.show()
```

The above histogram illustrates the Central Limit Theorem. As the sample size increases, the sampling distribution of the average of differences between the mean becomes normal. The zero is in the middle of the distribution because the true difference in mean of the `amount` variable between the control and treament is close to zero and the difference is not significant as proven earlier. 

